{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://game-of-life/./src/drawField/drawField.ts","webpack://game-of-life/./src/getCurrentCellState/getCurrentCellState.ts","webpack://game-of-life/./src/getNextFieldState/getNextFieldState.ts","webpack://game-of-life/./src/getAliveNeighboursCount/getAliveNeighboursCount.ts","webpack://game-of-life/./src/getNewCellState/getNewCellState.ts","webpack://game-of-life/./src/createGameOfLife/createGameOfLife.ts","webpack://game-of-life/./src/index.ts","webpack://game-of-life/./src/checkLivingCells/checkLivingCells.ts","webpack://game-of-life/./src/checkPeriodicConfiguration/checkPeriodicConfiguration.ts","webpack://game-of-life/./src/clearField/clearField.ts"],"sourcesContent":["export function drawField(\n  parentElement: HTMLElement,\n  field: number[][],\n  nextStateField: number[][],\n  clickHandler?: (x: number, y: number) => void\n): void {\n  parentElement.innerHTML = \"\";\n  const fieldElement = field.reduce((fieldContainer, row, y) => {\n    const tr = row.reduce((trContainer, state, x) => {\n      const cell = document.createElement(\"td\");\n      const nextState = nextStateField[y][x];\n      let stateClass: string;\n      if(state === 1 && nextState === 1) {\n        stateClass = \"cell_alive\";\n      } else if (state === 1 && nextState === 0) {\n        stateClass = \"cell_dying\";\n      }else {\n        stateClass = \"cell_dead\";\n      }\n      cell.classList.add(\"cell\", stateClass);\n      cell.dataset.x = String(x);\n      cell.dataset.y = String(y);\n      if (clickHandler) {\n        cell.addEventListener(\"click\", (evt) =>\n          clickHandler(\n            Number((evt.target as HTMLElement).dataset.x),\n            Number((evt.target as HTMLElement).dataset.y)\n          )\n        );\n      }\n      trContainer.append(cell);\n      return trContainer;\n    }, document.createElement(\"tr\"));\n    fieldContainer.append(tr);\n    return fieldContainer;\n  }, document.createElement(\"table\"));\n  fieldElement.classList.add(\"game__field\");\n  parentElement.append(fieldElement);\n}\n","export function getCurrentCellState(field: number[][], x: number, y: number): number {\n  const state = field[y]?.[x];\n  return state ? state : 0;\n}\n","import { getCurrentCellState } from \"../getCurrentCellState/getCurrentCellState\";\nimport { getAliveNeighboursCount } from \"../getAliveNeighboursCount/getAliveNeighboursCount\";\nimport { getNewCellState } from \"../getNewCellState/getNewCellState\";\n\nexport function getNextFieldState(field: number[][]): number[][] {\n  const nextStateField = field.map((arr) => arr.slice());\n  field.forEach((row, y) => row.forEach((column, x) => {\n    const aliveNeighboursCount = getAliveNeighboursCount(field, x, y);\n    const currentState = getCurrentCellState(field, x, y);\n    nextStateField[y][x] = getNewCellState(currentState, aliveNeighboursCount);\n  }));\n  return nextStateField;\n}\n","import { getCurrentCellState } from \"../getCurrentCellState/getCurrentCellState\";\n\nexport function getAliveNeighboursCount(field: number[][], x: number, y: number) : number {\n  let count = 0;\n  for(let row = y - 1; row <= y + 1; row += 1){\n    for(let column = x - 1; column <= x + 1; column += 1) {\n      count += getCurrentCellState(field, column, row);\n    }\n  }\n  return count - getCurrentCellState(field, x, y);\n}\n","export function getNewCellState(currentState: number, aliveNeighboursCount: number): number {\n  let newState = currentState;\n  if(currentState === 0 && aliveNeighboursCount === 3)  {\n    newState = 1;\n  }\n  if(currentState === 1 && (aliveNeighboursCount < 2 || aliveNeighboursCount > 3)) {\n    newState = 0;\n  }\n  return newState;\n}\n","import { drawField } from \"../drawField/drawField\";\nimport { getNextFieldState } from \"../getNextFieldState/getNextFieldState\";\nimport { checkLivingCells } from \"../checkLivingCells/checkLivingCells\";\nimport { checkPeriodicConfiguration }\nfrom \"../checkPeriodicConfiguration/checkPeriodicConfiguration\";\nimport { clearField } from \"../clearField/clearField\";\n\nexport function createGameOfLife(sizeX: number, sizeY: number, parentElement: HTMLElement): void {\n  let timer: number;\n  let checkFieldConfiguration: (field: number[][]) => boolean;\n  let isRunning = false;\n  let field = Array.from(Array(sizeY), () => Array(sizeX).fill(0));\n  let nextStateField: number[][];\n\n  const header = document.createElement('h1');\n  const fieldContainer = document.createElement('div');\n  const buttonHandler = document.createElement('div');\n  const startButton = document.createElement('button');\n  const clearButton = document.createElement('button');\n  const speedInput = document.createElement('input') as HTMLInputElement;\n  const speedInputDescription = document.createElement('span') as HTMLSpanElement;\n\n  function clickHandler(x: number, y: number): void {\n    field[y][x] = field[y][x] === 1 ? 0 : 1;\n    drawField(fieldContainer, field, field, clickHandler);\n  }\n\n  function stop(): void {\n    clearInterval(timer);\n    isRunning = false;\n    startButton.textContent = 'Start';\n  }\n\n  function setGameSpeed(speed: string) {\n    clearInterval(timer);\n    timer = window.setInterval(() => {\n      field = getNextFieldState(field);\n      nextStateField = getNextFieldState(field);\n      if(checkLivingCells(field) || checkFieldConfiguration(field)) { stop(); }\n      setTimeout(drawField, Number(speed) / 2, fieldContainer, field, nextStateField, clickHandler);\n      drawField(fieldContainer, field, field, clickHandler);\n    }, Number(speed));\n  }\n\n  function start(): void {\n    isRunning = true;\n    startButton.textContent = 'Stop';\n    checkFieldConfiguration = checkPeriodicConfiguration();\n    checkFieldConfiguration(field);\n    setGameSpeed(speedInput.value);\n  }\n\n  header.textContent = \"Game of life\";\n  header.classList.add('game__title');\n  fieldContainer.classList.add('game__container');\n  buttonHandler.classList.add(\"button-handler\");\n  startButton.classList.add('game__button', 'game__start-btn');\n  clearButton.classList.add('game__button','game__clear-btn');\n  startButton.type = \"button\";\n  startButton.textContent = 'Start';\n  clearButton.type = \"button\";\n  clearButton.textContent = 'Clear';\n\n  speedInput.classList.add('game__input_speed');\n  speedInput.type = \"range\";\n  speedInput.min = \"500\";\n  speedInput.max = \"3000\";\n  speedInput.value = \"1000\";\n  speedInput.step = \"500\";\n  speedInputDescription.textContent =\n    `Speed: ${(1000 / Number(speedInput.value)).toFixed(2)} generation/sec`;\n\n  startButton.addEventListener('click', () => isRunning ? stop() : start());\n  clearButton.addEventListener('click', () => {\n    field = clearField(field);\n    drawField(fieldContainer, field, field, clickHandler);\n  });\n  speedInput.addEventListener('change', () => {\n    if(isRunning) { setGameSpeed(speedInput.value) }\n    speedInputDescription.textContent =\n    `Speed: ${(1000 / Number(speedInput.value)).toFixed(2)} generation/sec`;\n  });\n\n  drawField(fieldContainer, field, field, clickHandler);\n  buttonHandler.append(startButton, clearButton);\n  parentElement.append(header, fieldContainer, buttonHandler, speedInput, speedInputDescription);\n}\n","import { createGameOfLife } from \"./createGameOfLife/createGameOfLife\";\nimport \"./index.css\";\n\nconst parentElement = document.querySelector('.game') as HTMLElement;\ncreateGameOfLife(10, 10, parentElement);\n","export function checkLivingCells(field: number[][]): boolean {\n  return !field.some((row) => row.some((cell) => cell === 1));\n}\n","export function checkPeriodicConfiguration(): (field: number[][]) => boolean {\n  const cash = new Set();\n  return function innerFunction(field: number[][]): boolean {\n    const argument = JSON.stringify(field);\n    const contains = cash.has(argument);\n    if(!contains) cash.add(argument);\n    return contains;\n  }\n}\n","export function clearField(field: number[][]): number[][] {\n  return field.map((arr) => arr.map(() => 0));\n}\n"],"names":["drawField","parentElement","field","nextStateField","clickHandler","innerHTML","fieldElement","reduce","fieldContainer","row","y","tr","trContainer","state","x","stateClass","cell","document","createElement","nextState","classList","add","dataset","String","addEventListener","evt","Number","target","append","getCurrentCellState","getNextFieldState","map","arr","slice","forEach","column","aliveNeighboursCount","count","getAliveNeighboursCount","currentState","newState","getNewCellState","sizeX","sizeY","timer","checkFieldConfiguration","isRunning","Array","from","fill","header","buttonHandler","startButton","clearButton","speedInput","speedInputDescription","stop","clearInterval","textContent","setGameSpeed","speed","window","setInterval","some","checkLivingCells","setTimeout","type","min","max","value","step","toFixed","cash","Set","argument","JSON","stringify","contains","has","clearField","createGameOfLife","querySelector"],"sourceRoot":""}