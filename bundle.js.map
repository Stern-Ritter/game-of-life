{"version":3,"file":"bundle.js","mappings":"yBAAO,SAASA,EAAUC,EACxBC,EAAmBC,GACjBF,EAAcG,UAAY,GAC1B,IAAMC,EAAeH,EAAMI,QAAO,SAACC,EAAgBC,EAAKC,GACtD,IAAMC,EAAKF,EAAIF,QAAO,SAACK,EAAaC,EAAOC,GACzC,IAAMC,EAAOC,SAASC,cAAc,MAYpC,OAXAF,EAAKG,UAAUC,IAAI,OAAkB,IAAVN,EAAc,aAAe,aACxDE,EAAKK,QAAQN,EAAIO,OAAOP,GACxBC,EAAKK,QAAQV,EAAIW,OAAOX,GACrBN,GACDW,EAAKO,iBAAiB,SACtB,SAACC,GAAD,OAASnB,EACPoB,OAAQD,EAAIE,OAAuBL,QAAQN,GAC3CU,OAAQD,EAAIE,OAAuBL,QAAQV,OAG/CE,EAAYc,OAAOX,GACZH,IACNI,SAASC,cAAc,OAE1B,OADAT,EAAekB,OAAOf,GACfH,IACNQ,SAASC,cAAc,UAC1BX,EAAaY,UAAUC,IAAI,eAC3BjB,EAAcwB,OAAOpB,GCvBlB,SAASqB,EAAoBxB,EAAmBW,EAAWJ,GAAmB,MAEnF,OADW,UAAGP,EAAMO,UAAT,aAAG,EAAWI,KACF,GCGlB,SAA0Bc,EAAeC,EAAe3B,GAC7D,IAAI4B,EACAC,EACAC,GAAY,EAEVxB,EAAiBQ,SAASC,cAAc,OACxCgB,EAASjB,SAASC,cAAc,UAChCiB,EAAalB,SAASC,cAAc,SACpCkB,EAAwBnB,SAASC,cAAc,QAEjDd,EAAQiC,MAAMC,KAAKD,MCXJ,KDWkB,kBAAMA,MCX5B,IDWyCE,KAAK,MAE7D,SAASlC,EAAaU,EAAWJ,GAC/BP,EAAMO,GAAGI,GAAqB,IAAhBX,EAAMO,GAAGI,GAAW,EAAI,EACtCb,EAAUO,EAAgBL,EAAOC,GAGnC,SAASmC,IACPC,cAAcV,GACdE,GAAY,EACZC,EAAOQ,YAAc,QAGvB,SAASC,EAAaC,GACpBH,cAAcV,GACdA,EAAQc,OAAOC,aAAY,YE9BxB,SAA0B1C,GAC/B,OAAQA,EAAM2C,MAAK,SAACrC,GAAD,OAASA,EAAIqC,MAAK,SAAC/B,GAAD,OAAmB,IAATA,QF+BxCgC,CADH5C,EG3BC,SAA2BA,GAChC,IAAM6C,EAAiB7C,EAAM8C,KAAI,SAACC,GAAD,OAASA,EAAIC,WAM9C,OALAhD,EAAMiD,SAAQ,SAAC3C,EAAKC,GAAN,OAAYD,EAAI2C,SAAQ,SAACC,EAAQvC,GAC7C,IAAMwC,ECLH,SAAiCnD,EAAmBW,EAAWJ,GAEpE,IADA,IAAI6C,EAAQ,EACJ9C,EAAMC,EAAI,EAAGD,GAAOC,EAAI,EAAGD,GAAO,EACxC,IAAI,IAAI4C,EAASvC,EAAI,EAAGuC,GAAUvC,EAAI,EAAGuC,GAAU,EACjDE,GAAS5B,EAAoBxB,EAAOkD,EAAQ5C,GAGhD,OAAO8C,EAAQ5B,EAAoBxB,EAAOW,EAAGJ,GDFd8C,CAAwBrD,EAAOW,EAAGJ,GACzD+C,EAAe9B,EAAoBxB,EAAOW,EAAGJ,GACnDsC,EAAetC,GAAGI,GETf,SAAyB2C,EAAsBH,GACpD,IAAII,EAAWD,EAOf,OANoB,IAAjBA,GAA+C,IAAzBH,IACvBI,EAAW,GAEO,IAAjBD,IAAuBH,EAAuB,GAAKA,EAAuB,KAC3EI,EAAW,GAENA,EFCkBC,CAAgBF,EAAcH,SAEhDN,EHoBKY,CAAkBzD,KACI4B,EAAwB5B,KAAQoC,IAC9DtC,EAAUO,EAAgBL,EAAOC,KAChCoB,OAAOmB,IAWZnC,EAAeU,UAAUC,IAAI,mBAC7Bc,EAAOf,UAAUC,IAAI,gBACrBc,EAAOQ,YAAc,QAErBP,EAAWhB,UAAUC,IAAI,qBACzBe,EAAW2B,KAAO,QAClB3B,EAAW4B,IAAM,MACjB5B,EAAW6B,IAAM,OACjB7B,EAAW8B,MAAQ,OACnB9B,EAAW+B,KAAO,MAClB9B,EAAsBM,YAAtB,kBACa,IAAOjB,OAAOU,EAAW8B,QAAQE,QAAQ,GADtD,mBAGAjC,EAAOX,iBAAiB,SAAS,kBAAMU,EAAYO,KApBjDP,GAAY,EACZC,EAAOQ,YAAc,OMtCjB0B,EAAO,IAAIC,INuCfrC,EMtCK,SAAuB5B,GAC5B,IAAMkE,EAAWC,KAAKC,UAAUpE,GAC1BqE,EAAWL,EAAKM,IAAIJ,GAE1B,OADIG,GAAUL,EAAKhD,IAAIkD,GAChBG,GNmCPzC,EAAwB5B,QACxBuC,EAAaR,EAAW8B,QAL1B,IMpCMG,KN0DNjC,EAAWZ,iBAAiB,UAAU,WACjCU,GAAaU,EAAaR,EAAW8B,OACxC7B,EAAsBM,YAAtB,kBACW,IAAOjB,OAAOU,EAAW8B,QAAQE,QAAQ,GADpD,sBAIFjE,EAAUO,EAAgBL,EAAOC,GACjCF,EAAcwB,OAAOlB,EAAgB0B,EAAYC,EAAuBF,GC9D1EyC,CAAiB,EAAI,EADC1D,SAAS2D,cAAc,U","sources":["webpack://game-of-life/./src/drawField.ts","webpack://game-of-life/./src/getCurrentCellState.ts","webpack://game-of-life/./src/createGameOfLife.ts","webpack://game-of-life/./src/index.ts","webpack://game-of-life/./src/checkLivingCells.ts","webpack://game-of-life/./src/getNextFieldState.ts","webpack://game-of-life/./src/getAliveNeighboursCount.ts","webpack://game-of-life/./src/getNewCellState.ts","webpack://game-of-life/./src/checkPeriodicConfiguration.ts"],"sourcesContent":["export function drawField(parentElement: HTMLElement,\n  field: number[][], clickHandler?: (x: number, y:number) => void): void {\n    parentElement.innerHTML = '';\n    const fieldElement = field.reduce((fieldContainer, row, y) => {\n      const tr = row.reduce((trContainer, state, x) => {\n        const cell = document.createElement('td');\n        cell.classList.add('cell', state === 1 ? 'cell_alive' : 'cell_dead');\n        cell.dataset.x = String(x);\n        cell.dataset.y = String(y);\n        if(clickHandler) {\n          cell.addEventListener('click',\n          (evt) => clickHandler(\n            Number((evt.target as HTMLElement).dataset.x),\n            Number((evt.target as HTMLElement).dataset.y)\n          ))\n        }\n        trContainer.append(cell);\n        return trContainer;\n      }, document.createElement('tr'));\n      fieldContainer.append(tr);\n      return fieldContainer;\n    }, document.createElement('table'));\n    fieldElement.classList.add('game__field');\n    parentElement.append(fieldElement);\n}\n","export function getCurrentCellState(field: number[][], x: number, y: number): number {\n  const state = field[y]?.[x];\n  return state ? state : 0;\n}\n","import { drawField } from \"./drawField\";\nimport { getNextFieldState } from \"./getNextFieldState\";\nimport { checkLivingCells } from \"./checkLivingCells\";\nimport { checkPeriodicConfiguration } from \"./checkPeriodicConfiguration\";\n\nexport function createGameOfLife(sizeX: number, sizeY: number, parentElement: HTMLElement): void {\n  let timer: number;\n  let checkFieldConfiguration: (field: number[][]) => boolean;\n  let isRunning = false;\n\n  const fieldContainer = document.createElement('div');\n  const button = document.createElement('button');\n  const speedInput = document.createElement('input') as HTMLInputElement;\n  const speedInputDescription = document.createElement('span') as HTMLSpanElement;\n\n  let field = Array.from(Array(sizeY), () => Array(sizeX).fill(0));\n\n  function clickHandler(x: number, y: number): void {\n    field[y][x] = field[y][x] === 1 ? 0 : 1;\n    drawField(fieldContainer, field, clickHandler);\n  }\n\n  function stop(): void {\n    clearInterval(timer);\n    isRunning = false;\n    button.textContent = 'Start';\n  }\n\n  function setGameSpeed(speed: string) {\n    clearInterval(timer);\n    timer = window.setInterval(() => {\n      field = getNextFieldState(field);\n      if(checkLivingCells(field) || checkFieldConfiguration(field)) stop();\n      drawField(fieldContainer, field, clickHandler);\n    }, Number(speed));\n  }\n\n  function start(): void {\n    isRunning = true;\n    button.textContent = 'Stop';\n    checkFieldConfiguration = checkPeriodicConfiguration();\n    checkFieldConfiguration(field);\n    setGameSpeed(speedInput.value);\n  }\n\n  fieldContainer.classList.add('game__container');\n  button.classList.add('game__button');\n  button.textContent = 'Start';\n\n  speedInput.classList.add('game__input_speed');\n  speedInput.type = \"range\";\n  speedInput.min = \"500\";\n  speedInput.max = \"3000\";\n  speedInput.value = \"1000\";\n  speedInput.step = \"500\";\n  speedInputDescription.textContent =\n    `Speed: ${(1000 / Number(speedInput.value)).toFixed(2)} generation/sec`;\n\n  button.addEventListener('click', () => isRunning ? stop() : start());\n  speedInput.addEventListener('change', () => {\n    if(isRunning) { setGameSpeed(speedInput.value) }\n    speedInputDescription.textContent =\n    `Speed: ${(1000 / Number(speedInput.value)).toFixed(2)} generation/sec`;\n  });\n\n  drawField(fieldContainer, field, clickHandler);\n  parentElement.append(fieldContainer, speedInput, speedInputDescription, button);\n}\n","import { createGameOfLife } from \"./createGameOfLife\";\nimport \"./index.css\";\n\nconst parentElement = document.querySelector('.game') as HTMLElement;\ncreateGameOfLife(10, 10, parentElement);\n","export function checkLivingCells(field: number[][]): boolean {\n  return !field.some((row) => row.some((cell) => cell === 1));\n}\n","import { getCurrentCellState } from \"./getCurrentCellState\";\nimport { getAliveNeighboursCount } from \"./getAliveNeighboursCount\";\nimport { getNewCellState } from \"./getNewCellState\";\n\nexport function getNextFieldState(field: number[][]): number[][] {\n  const nextStateField = field.map((arr) => arr.slice());\n  field.forEach((row, y) => row.forEach((column, x) => {\n    const aliveNeighboursCount = getAliveNeighboursCount(field, x, y);\n    const currentState = getCurrentCellState(field, x, y);\n    nextStateField[y][x] = getNewCellState(currentState, aliveNeighboursCount);\n  }));\n  return nextStateField;\n}\n","import { getCurrentCellState } from \"./getCurrentCellState\";\n\nexport function getAliveNeighboursCount(field: number[][], x: number, y: number) : number {\n  let count = 0;\n  for(let row = y - 1; row <= y + 1; row += 1){\n    for(let column = x - 1; column <= x + 1; column += 1) {\n      count += getCurrentCellState(field, column, row);\n    }\n  }\n  return count - getCurrentCellState(field, x, y);\n}\n","export function getNewCellState(currentState: number, aliveNeighboursCount: number): number {\n  let newState = currentState;\n  if(currentState === 0 && aliveNeighboursCount === 3)  {\n    newState = 1;\n  }\n  if(currentState === 1 && (aliveNeighboursCount < 2 || aliveNeighboursCount > 3)) {\n    newState = 0;\n  }\n  return newState;\n}\n","export function checkPeriodicConfiguration(): (field: number[][]) => boolean {\n  const cash = new Set();\n  return function innerFunction(field: number[][]): boolean {\n    const argument = JSON.stringify(field);\n    const contains = cash.has(argument);\n    if(!contains) cash.add(argument);\n    return contains;\n  }\n}\n"],"names":["drawField","parentElement","field","clickHandler","innerHTML","fieldElement","reduce","fieldContainer","row","y","tr","trContainer","state","x","cell","document","createElement","classList","add","dataset","String","addEventListener","evt","Number","target","append","getCurrentCellState","sizeX","sizeY","timer","checkFieldConfiguration","isRunning","button","speedInput","speedInputDescription","Array","from","fill","stop","clearInterval","textContent","setGameSpeed","speed","window","setInterval","some","checkLivingCells","nextStateField","map","arr","slice","forEach","column","aliveNeighboursCount","count","getAliveNeighboursCount","currentState","newState","getNewCellState","getNextFieldState","type","min","max","value","step","toFixed","cash","Set","argument","JSON","stringify","contains","has","createGameOfLife","querySelector"],"sourceRoot":""}